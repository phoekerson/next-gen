const { PrismaClient } = require('@prisma/client');

async function testUserSync() {
  const prisma = new PrismaClient();

  try {
    console.log('üß™ Test de synchronisation des utilisateurs...\n');

    // Test 1: V√©rifier les utilisateurs existants
    const users = await prisma.user.findMany({
      orderBy: { createdAt: 'desc' },
      take: 5
    });

    console.log('üë• Utilisateurs dans la base:');
    if (users.length > 0) {
      users.forEach((user, index) => {
        console.log(`${index + 1}. ${user.name || 'Sans nom'} (${user.email || 'Pas d\'email'}) - ${user.clerkId}`);
      });
    } else {
      console.log('‚ùå Aucun utilisateur trouv√©');
    }

    // Test 2: Test de l'API de synchronisation
    console.log('\nüîÑ Test de l\'API de synchronisation...');
    
    const testUserData = {
      clerkId: 'test_user_' + Date.now(),
      email: 'test@example.com',
      name: 'Utilisateur Test',
      avatarUrl: null
    };

    try {
      const response = await fetch('http://localhost:3000/api/sync-user', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(testUserData),
      });

      if (response.ok) {
        console.log('‚úÖ API de synchronisation fonctionne');
        
        // V√©rifier que l'utilisateur a √©t√© cr√©√©
        const createdUser = await prisma.user.findUnique({
          where: { clerkId: testUserData.clerkId }
        });

        if (createdUser) {
          console.log('‚úÖ Utilisateur cr√©√© avec succ√®s:', createdUser.name);
          
          // Nettoyer l'utilisateur de test
          await prisma.user.delete({ where: { id: createdUser.id } });
          console.log('üßπ Utilisateur de test supprim√©');
        } else {
          console.log('‚ùå Utilisateur non trouv√© apr√®s cr√©ation');
        }
      } else {
        const error = await response.json();
        console.log('‚ùå Erreur API:', error);
      }
    } catch (error) {
      console.log('‚ùå Erreur test API:', error.message);
    }

    // Test 3: V√©rifier la configuration
    console.log('\nüîß V√©rification de la configuration...');
    
    const envVars = [
      'DATABASE_URL',
      'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY',
      'CLERK_SECRET_KEY',
      'NEXT_PUBLIC_SUPABASE_URL',
      'SUPABASE_SERVICE_ROLE_KEY'
    ];

    envVars.forEach(varName => {
      const value = process.env[varName];
      if (value) {
        console.log(`‚úÖ ${varName}: Configur√©`);
      } else {
        console.log(`‚ùå ${varName}: Manquant`);
      }
    });

    console.log('\nüìä R√©sum√©:');
    console.log(`- Utilisateurs dans la base: ${users.length}`);
    console.log(`- API de synchronisation: ${users.length > 0 ? 'Fonctionne' : '√Ä tester'}`);

    if (users.length === 0) {
      console.log('\n‚ö†Ô∏è  SOLUTIONS:');
      console.log('1. Connectez-vous avec Clerk sur l\'application');
      console.log('2. V√©rifiez que le UserSyncProvider est actif');
      console.log('3. Regardez les logs dans la console du navigateur');
      console.log('4. V√©rifiez que l\'API /api/sync-user fonctionne');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testUserSync();