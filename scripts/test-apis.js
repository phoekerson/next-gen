const { PrismaClient } = require('@prisma/client');

async function testAPIs() {
  const prisma = new PrismaClient();

  try {
    console.log('üß™ Test des APIs de l\'application...\n');

    // Test 1: API /api/docs
    console.log('1Ô∏è‚É£ Test API /api/docs');
    try {
      const response = await fetch('http://localhost:3000/api/docs');
      const data = await response.json();
      
      if (response.ok) {
        console.log(`‚úÖ API /api/docs fonctionne - ${data.docs?.length || 0} documents trouv√©s`);
      } else {
        console.log(`‚ùå API /api/docs erreur: ${data.error}`);
      }
    } catch (error) {
      console.log(`‚ùå API /api/docs erreur: ${error.message}`);
    }

    // Test 2: V√©rification des utilisateurs
    console.log('\n2Ô∏è‚É£ Test synchronisation utilisateurs');
    const users = await prisma.user.findMany({
      orderBy: { createdAt: 'desc' },
      take: 3
    });
    
    if (users.length > 0) {
      console.log(`‚úÖ ${users.length} utilisateurs trouv√©s dans la base:`);
      users.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.name || 'Sans nom'} (${user.clerkId})`);
      });
    } else {
      console.log('‚ö†Ô∏è  Aucun utilisateur trouv√©. V√©rifiez le webhook Clerk.');
    }

    // Test 3: V√©rification des documents
    console.log('\n3Ô∏è‚É£ Test documents');
    const docs = await prisma.document.findMany({
      orderBy: { createdAt: 'desc' },
      take: 3,
      include: { uploadedBy: true }
    });
    
    if (docs.length > 0) {
      console.log(`‚úÖ ${docs.length} documents trouv√©s:`);
      docs.forEach((doc, index) => {
        console.log(`   ${index + 1}. ${doc.title} (${doc.level}) - ${doc.filename}`);
      });
    } else {
      console.log('‚ÑπÔ∏è  Aucun document trouv√©. Testez l\'upload.');
    }

    // Test 4: V√©rification des URLs Supabase
    console.log('\n4Ô∏è‚É£ Test URLs Supabase');
    const docsWithUrls = await prisma.document.findMany({
      where: {
        fileUrl: {
          contains: 'supabase'
        }
      },
      take: 1
    });

    if (docsWithUrls.length > 0) {
      const doc = docsWithUrls[0];
      console.log(`‚úÖ URL Supabase trouv√©e: ${doc.fileUrl}`);
      
      // Test de l'URL
      try {
        const urlResponse = await fetch(doc.fileUrl, { method: 'HEAD' });
        if (urlResponse.ok) {
          console.log('‚úÖ URL Supabase accessible');
        } else {
          console.log(`‚ö†Ô∏è  URL Supabase non accessible: ${urlResponse.status}`);
        }
      } catch (error) {
        console.log(`‚ùå Erreur test URL: ${error.message}`);
      }
    } else {
      console.log('‚ÑπÔ∏è  Aucun document avec URL Supabase trouv√©');
    }

    console.log('\nüéØ R√©sum√© des tests:');
    console.log(`- Utilisateurs: ${users.length}`);
    console.log(`- Documents: ${docs.length}`);
    console.log(`- URLs Supabase: ${docsWithUrls.length}`);

    if (users.length === 0) {
      console.log('\n‚ö†Ô∏è  RECOMMANDATIONS:');
      console.log('1. Configurez le webhook Clerk');
      console.log('2. Inscrivez-vous avec un nouveau compte');
      console.log('3. V√©rifiez les logs du serveur');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testAPIs();
